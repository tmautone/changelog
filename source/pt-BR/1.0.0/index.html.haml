---
description: Mantenha um <em>Changelog</em>
title: Mantenha um <em>Changelog</em>
language: pt-BR
version: 1.0.0
---

- changelog = "https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md"
- gemnasium = "https://gemnasium.com/"
- gh = "https://github.com/olivierlacan/keep-a-changelog"
- issues = "https://github.com/olivierlacan/keep-a-changelog/issues"
- semver = "http://semver.org/"
- shields = "http://shields.io/"
- thechangelog = "http://5by5.tv/changelog/127"
- vandamme = "https://github.com/tech-angels/vandamme/"
- iso = "http://www.iso.org/iso/home/standards/iso8601.htm"
- ghr = "https://help.github.com/articles/creating-releases/"

.header
  .title
    %h1 Mantenha um <em>Changelog</em>
    %h2 Não deixe seus amigos despejarem <em>logs</em> de <em>commits</em> no <em>Changelog</em>

  = link_to changelog do
    Version
    %strong= current_page.metadata[:page][:version]

  %pre.changelog= File.read("CHANGELOG.md")

.answers
  %h3#what
    %a.anchor{ href: "#what", aria_hidden: "true" }
    O que é um <em>changelog</em>?

  %p
    Um <em>changelog</em> é um arquivo que contém uma lista selecionada, ordenada
    cronologicamente, de mudanças significativas para cada versão de um projeto.

  %h3#why
    %a.anchor{ href: "#why", aria_hidden: "true" }
    Por que manter um <em>changelog</em>?

  %p
    Para facilitar que usuários e contribuidores vejam precisamente quais
    mudanças significativas foram realizadas entre cada versão publicada de
    um projeto.

  %h3#who
    %a.anchor{ href: "#who", aria_hidden: "true" }
    Quem precisa de um <em>changelog</em>?

  %p
    Pessoas precisam. Seja consumidores ou desenvolvedores,
    os usuários finais de <em>softwares</em> são seres humanos
    que se preocupam com o que está no <em>software</em>. Quando
    o <em>software</em> muda, as pessoas querem saber por que e como.

.good-practices
  %h3#how
    %a.anchor{ href: "#how", aria_hidden: "true" }
    Como fazer um bom <em>changelog</em>?

  %h4#principles
    %a.anchor{ href: "#principles", aria_hidden: "true" }
    Princípios fundamentais

  %ul
    %li
      <em>Changelogs</em> são <em>para humanos</em>, não máquinas.
    %li
      Deve haver uma entrada para cada versão.
    %li
      Alterações do mesmo tipo devem ser agrupadas.
    %li
      Versões e seções devem ser vinculáveis (com <em>links</em>).
    %li
      A versão mais recente vem em primeiro lugar.
    %li
      A data de lançamento de cada versão é exibida.
    %li
      Mencione se você segue o #{link_to "versionamento semântico", semver}.

  %a.anchor{ href: "#types", aria_hidden: "true" }
  %h4#types Tipos de mudanças

  %ul
    %li
      %code Added/Adicionado
      para novos recursos.
    %li
      %code Changed/Modificado
      for changes in existing functionality.
    %li
      %code Deprecated/Obsoleto
      para funcionalidades que serão removidas nas próximas versões.
    %li
      %code Removed/Removido
      para recursos removidos nesta versão.
    %li
      %code Fixed/Corrigido
      para qualquer correção de bug.
    %li
      %code Security/Segurança
      em caso de vulnerabilidades.

.effort

  %h3#effort
    %a.anchor{ href: "#effort", aria_hidden: "true" }
    Como eu posso minimizar o esforço exigido para manter um <em>changelog<em>?

  %p
    Mantenha sempre uma seção <code>Não publicado</code> no topo para manter o controle das novas mudanças.

  %p Isso serve a dois propósitos:

  %ul
    %li
      As pessoas podem ver quais mudanças elas podem esperar em publicações futuras.
    %li
      No momento da publicação, você apenas tem de mudar a seção
      <code>Não publicado</code> para o número de versão e adicionar uma
      nova seção <code>Não publicado</code> no topo.

.bad-practices
  %h3#bad-practices
    %a.anchor{ href: "#bad-practices", aria_hidden: "true" }
    Os <em>changelogs<em> podem ser ruins?

  %p Sim. Aqui estão algumas maneiras pelas quais eles podem ser inúteis.

  %h4#log-diffs
    %a.anchor{ href: "#log-diffs", aria_hidden: "true" }
    Usar um registro de alterações automático

  %p
    Usar um registro de alterações automático é uma má idéia: eles estão
    cheios de bagunça. Coisas como solicitação de mesclagem, envio com títulos
    estranhos, alterações de documentação, etc.

  %p
    O propósito de um <em>commit</em> é documentar a etapa na evolução do código
    fonte. Alguns projetos limpam os <em>commits</em>, outros não.

  %p
    O propósito de uma entrada de <em>changelog</em> é documentar as diferenças
    notáveis, muitas vezes de múltiplos <em>commits</em>, para comunicar de forma
    clara os usuários.

  %h4#ignoring-deprecations
    %a.anchor{ href: "#ignoring-deprecations", aria_hidden: "true" }
    Ignorando depreciações

  %p
    Quando pessoas atualizam de uma versão para outra, deve ser dolorosamente
    claro quando algo vai quebrar. Deve ser possível atualizar para uma versão
    com depreciações listadas, remova o que é obsoleto, depois atualize
    para a versão onde as depreciações se tornam remoções.

  %p
    Se você não fizer mais nada, liste as depreciações, remoções e quaisquer
    mudanças de quebra no seu <em>changelog</em>.

  %h4#confusing-dates
    %a.anchor{ href: "#confusing-dates", aria_hidden: "true" }
    Datas confusas

  %p
    Os formatos regionais de data variam em todo o mundo e muitas vezes
    é difícil encontrar um formato de data amigável que seja intuitivo para todos.
    A vantagem das datas formatadas como <code>2017-07-17</code> é que elas seguem
    a ordem da maior para a menor unidade de tempo: ano, mês e dia. Este formato
    também não se sobrepôem de maneira ambígua como em outros formatos de data, ao
    contrário de alguns formatos regionais que alteram a posição dos números do mês
    e dia. Esses motivos, e o fato de ser um formato de data suportado pelo 
    #{link_to "ISO standard", iso} são as razões para ele ser o formato de data
    recomendado para as entradas do <em>changelog</em>.

  %aside
    There’s more. Help me collect these antipatterns by
    = link_to "opening an issue", issues
    or a pull request.

.frequently-asked-questions
  %h3#frequently-asked-questions
    %a.anchor{ href: "#frequently-asked-questions", aria_hidden: "true" }
    Frequently Asked Questions

  %h4#standard
    %a.anchor{ href: "#standard", aria_hidden: "true" }
    Is there a standard changelog format?

  %p
    Not really. There's the GNU changelog style guide, or the two-
    paragraph-long GNU NEWS file "guideline". Both are inadequate or
    insufficient.

  %p
    This project aims to be
    = link_to "a better changelog convention.", changelog
    It comes from observing good practices in the open source
    community and gathering them.

  %p
    Healthy criticism, discussion and suggestions for improvements
    = link_to "are welcome.", issues


  %h4#filename
    %a.anchor{ href: "#filename", aria_hidden: "true" }
    What should the changelog file be named?

  %p
    Call it <code>CHANGELOG.md</code>. Some projects use
    <code>HISTORY</code>, <code>NEWS</code> or <code>RELEASES</code>.

  %p
    While it's easy to think that the name of your changelog file
    doesn't matter that much, why make it harder for your end users to
    consistently find notable changes?

  %h4#github-releases
    %a.anchor{ href: "#github-releases", aria_hidden: "true" }
    What about GitHub Releases?

  %p
    It's a great initiative. #{link_to "Releases", ghr} can be used to
    turn simple git tags (for example a tag named <code>v1.0.0</code>)
    into rich release notes by manually adding release notes or it can
    pull annotated git tag messages and turn them into notes.

  %p
    GitHub Releases create a non-portable changelog that can only be
    displayed to users within the context of GitHub. It's possible to
    make them look very much like the Keep a Changelog format, but it
    tends to be a bit more involved.

  %p
    The current version of GitHub releases is also arguably not very
    discoverable by end-users, unlike the typical uppercase files
    (<code>README</code>, <code>CONTRIBUTING</code>, etc.). Another
    minor issue is that the interface doesn't currently offer links to
    commit logs between each release.

  %h4#automatic
    %a.anchor{ href: "#automatic", aria_hidden: "true" }
    Can changelogs be automatically parsed?

  %p
    It’s difficult, because people follow wildly different formats and
    file names.

  %p
    #{link_to "Vandamme", vandamme} is a Ruby gem created by the
    #{link_to "Gemnasium", gemnasium} team and which parses many (but
    not all) open source project changelogs.


  %h4#yanked
    %a.anchor{ href: "#yanked", aria_hidden: "true" }
    What about yanked releases?

  %p
    Yanked releases are versions that had to be pulled because of a
    serious bug or security issue. Often these versions don't even
    appear in change logs. They should. This is how you should display
    them:

  %p <code>## 0.0.5 - 2014-12-13 [YANKED]</code>

  %p
    The <code>[YANKED]</code> tag is loud for a reason. It's important
    for people to notice it. Since it's surrounded by brackets it's also
    easier to parse programmatically.


  %h4#rewrite
    %a.anchor{ href: "#rewrite", aria_hidden: "true" }
    Should you ever rewrite a changelog?

  %p
    Sure. There are always good reasons to improve a changelog. I
    regularly open pull requests to add missing releases to open source
    projects with unmaintained changelogs.

  %p
    It's also possible you may discover that you forgot to address a
    breaking change in the notes for a version. It's obviously important
    for you to update your changelog in this case.


  %h4#contribute
    %a.anchor{ href: "#contribute", aria_hidden: "true" }
    How can I contribute?

  %p
    This document is not the <strong>truth</strong>; it’s my carefully
    considered opinion, along with information and examples I gathered.

  %p
    This is because I want our community to reach a consensus. I believe
    the discussion is as important as the end result.

  %p
    So please <strong>#{link_to "pitch in", gh}</strong>.

.press
  %h3 Conversations
  %p
    I went on #{link_to "The Changelog podcast", thechangelog}
    to talk about why maintainers and contributors should care about changelogs,
    and also about the motivations behind this project.
