---
description: Keep a Changelog
title: Keep a Changelog
language: en
---

:markdown
  # Keep a CHANGELOG

  ## Don’t let your friends dump git logs into CHANGELOGs™

  ### What’s a change log?
  A change log is a file which contains a curated, chronologically ordered
  list of notable changes for each version of a project.

%pre.changelog= File.read(File.expand_path("../../CHANGELOG.md", __FILE__))

:markdown
  ### What’s the point of a change log?
  To make it easier for users and contributors to see precisely what
  notable changes have been made between each release (or version) of the project.

  ### Why should I care?
  Because software tools are for people. If you don’t care, why are
  you contributing to open source? Surely, there must be a kernel (ha!)
  of care somewhere in that lovely little brain of yours.

  I [talked with Adam Stacoviak and Jerod Santo on The Changelog][thechangelog]
  (fitting, right?) podcast about why maintainers and
  contributors should care, and the motivations behind this project.
  If you can spare the time (1:06), it’s a good listen.

  ### What makes a good change log?
  I’m glad you asked.

  A good change log sticks to these principles:

  - It’s made for humans, not machines, so legibility is crucial.
  - Easy to link to any section (hence Markdown over plain text).
  - One sub-section per version.
  - List releases in reverse-chronological order (newest on top).
  - Write all dates in `YYYY-MM-DD` format. (Example: `2012-06-02` for `June 2nd, 2012`.) It’s international, [sensible](http://xkcd.com/1179/), and language-independent.
  - Explicitly mention whether the project follows [Semantic Versioning][semver].
  - Each version should:
    - List its release date in the above format.
    - Group changes to describe their impact on the project, as follows:
      - `Added` for new features.
      - `Changed` for changes in existing functionality.
      - `Deprecated` for once-stable features removed in upcoming releases.
      - `Removed` for deprecated features removed in this release.
      - `Fixed` for any bug fixes.
      - `Security` to invite users to upgrade in case of vulnerabilities.

  ### How can I minimize the effort required?
  Always have an `"Unreleased"` section at the top for keeping track of any
  changes.

  This serves two purposes:

  - People can see what changes they might expect in upcoming releases
  - At release time, you just have to change `"Unreleased"` to the version number
    and add a new `"Unreleased"` header at the top.

  ### What makes unicorns cry?
  Alright…let’s get into it.

  - **Dumping a diff of commit logs.** Just don’t do that, you’re helping nobody.
  - **Not emphasizing deprecations.** When people upgrade from one version to
    another, it should be painfully clear when something will break.
  - **Dates in region-specific formats.** In the U.S., people put the month first
    ("06-02-2012" for June 2nd, 2012, which makes *no* sense), while many people
    in the rest of the world write a robotic-looking "2 June 2012", yet pronounce
    it differently. "2012-06-02" works logically from largest to smallest, doesn't
    overlap in ambiguous ways with other date formats, and is an
    [ISO standard](http://www.iso.org/iso/home/standards/iso8601.htm). Thus, it
    is the recommended date format for change logs.

  There’s more. Help me collect those unicorn tears by
  [opening an issue][issues]
  or a pull request.

  ### Is there a standard change log format?
  Sadly, no. Calm down. I know you're furiously rushing to find that link
  to the GNU change log style guide, or the two-paragraph GNU NEWS file
  "guideline". The GNU style guide is a nice start but it is sadly naive.
  There's nothing wrong with being naive but when people need
  guidance it's rarely very helpful. Especially when there are many
  situations and edge cases to deal with.

  This project [contains what I hope will become a better CHANGELOG file convention][CHANGELOG].
  I don't think the status quo is good enough, and I think that as a community we
  can come up with better conventions if we try to extract good practices from
  real software projects. Please take a look around and remember that
  [discussions and suggestions for improvements are welcome][issues]!

  ### What should the change log file be named?
  Well, if you can’t tell from the example above, `CHANGELOG.md` is the
  best convention so far.

  Some projects also use `HISTORY.txt`, `HISTORY.md`, `History.md`, `NEWS.txt`,
  `NEWS.md`, `News.txt`, `RELEASES.txt`, `RELEASE.md`, `releases.md`, etc.

  It’s a mess. All these names only makes it harder for people to find it.

  ### Why can’t people just use a `git log` diff?
  Because log diffs are full of noise — by nature. They could not make a suitable
  change log even in a hypothetical project run by perfect humans who never make
  typos, never forget to commit new files, never miss any part of a refactoring.
  The purpose of a commit is to document one atomic step in the process by which
  the code evolves from one state to another. The purpose of a change log is to
  document the noteworthy differences between these states.

  As is the difference between good comments and the code itself,
  so is the difference between a change log and the commit log:
  one describes the *why*, the other the how.

  ### Can change logs be automatically parsed?
  It’s difficult, because people follow wildly different formats and file names.

  [Vandamme][vandamme] is a Ruby gem
  created by the [Gemnasium][gemnasium] team and which parses
  many (but not all) open source project change logs.

  ### Why do you alternate between spelling it "CHANGELOG" and "change log"?
  "CHANGELOG" is the name of the file itself. It's a bit shouty but it's a
  historical convention followed by many open source projects. Other
  examples of similar files include [`README`][README], [`LICENSE`][LICENSE],
  and [`CONTRIBUTING`][CONTRIBUTING].

  The uppercase naming (which in old operating systems made these files stick
  to the top) is used to draw attention to them. Since they're important
  metadata about the project, they could be useful to anyone intending to use
  or contribute to it, much like [open source project badges][shields].

  When I refer to a "change log", I'm talking about the function of this
  file: to log changes.

  ### What about yanked releases?
  Yanked releases are versions that had to be pulled because of a serious
  bug or security issue. Often these versions don't even appear in change
  logs. They should. This is how you should display them:

  `## 0.0.5 - 2014-12-13 [YANKED]`

  The `[YANKED]` tag is loud for a reason. It's important for people to
  notice it. Since it's surrounded by brackets it's also easier to parse
  programmatically.

  ### Should you ever rewrite a change log?
  Sure. There are always good reasons to improve a change log. I regularly open
  pull requests to add missing releases to open source projects with unmaintained
  change logs.

  It's also possible you may discover that you forgot to address a breaking change
  in the notes for a version. It's obviously important for you to update your
  change log in this case.

  ### How can I contribute?
  This document is not the **truth**; it’s my carefully considered
  opinion, along with information and examples I gathered.
  Although I provide an actual [CHANGELOG][] on [the GitHub repo][gh],
  I have purposefully not created a proper *release* or clear list of rules
  to follow (as [SemVer.org][semver] does, for instance).

  This is because I want our community to reach a consensus. I believe the
  discussion is as important as the end result.

  So please [**pitch in**][gh].

  [CHANGELOG]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md
  [CONTRIBUTING]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CONTRIBUTING.md
  [LICENSE]: https://github.com/olivierlacan/keep-a-changelog/blob/master/LICENSE
  [README]: https://github.com/olivierlacan/keep-a-changelog/blob/master/README.md
  [gemnasium]: https://gemnasium.com/
  [gh]: https://github.com/olivierlacan/keep-a-changelog
  [issues]: https://github.com/olivierlacan/keep-a-changelog/issues
  [semver]: http://semver.org/
  [shields]: http://shields.io/
  [thechangelog]: http://5by5.tv/changelog/127
  [vandamme]: https://github.com/tech-angels/vandamme/
---
description: 如何維護更新日誌
title: 如何維護更新日誌
language: zh-cn
---

:markdown
  # 如何維護更新日誌

  ## 把git日誌往更新日誌裏塞是壹個錯誤的做飯

  ### 更新日誌是什麽？
  更新日誌（Change Log）是壹個由人工編輯，以時間為倒敘的列表。
  這個列表記錄所有版本的重大變動。


%pre.changelog= File.read(File.expand_path("../../CHANGELOG.md", __FILE__))

:markdown
  ### 為何要提供更新日誌？
  為了讓用戶和開發人員更好知道每壹個版本有哪些區別。
  
  ### 為何我要在乎呢？
  因為歸根結底軟件是為人提供的。既然妳不關心人，哪麽為何寫軟件呢？
  多少妳還是要關心妳的受眾。
  
  本文檔原作者和另外兩個人的壹個[播客][thechangelog]向大家介紹了，
  為何代碼的管理者和開發者應該在乎更新日誌。如果妳有壹小時時間和很好的英文聽力本領，
  不放聽聽。

  ### 怎麽定義好的更新日誌
  好問題！

  壹個好的更新日誌，壹定滿足：
  
  - 給人而不是機器寫的。記住，要說人話。
  - 快速跳轉到任意段。所以采用markdown格式
  - 壹個版本對應壹個章節。
  - 最新的版本在上，最老的在下面。
  - 所有日期采用'YYYY-MM-DD'這種規範。（例如北京奧運會的2008年8月8日是2008-08-08）這個是國際通用，任何語言
  都能理解的，並且還被[xkcd](http://xkcd.com/1179/)推薦呢！
  - 標出來是否遵守[語義化版本格式][semver]
  - 每壹個軟件的版本必須：
    - 標明日期（要用上面說過的規範）
    - 標明分類（采用英文）。規範如下：
      - 'Added' 添加的新功能
      - 'Changed' 功能變更
      - 'Deprecated' 不建議使用，未來會刪掉
      - 'Removed' 之前不建議使用的功能，這次真的刪掉了
      - 'Fixed' 改的bug
      - 'Security' 改的有關安全相關bug
 
  
  ### 怎麽盡可能減少耗費的精力？
  永遠在文檔最上方提供壹個'Unreleased' 未發布區域，來記錄當前的變化。
  這佯作有兩大意義。
  
  - 大家可以看到接下來會有什麽變化
  - 在發布時，只要把'Unreleased'改為當前版本號，然後再添加壹個新的'Unreleased'就行了
  

  ### 吐槽環節到了
  請妳壹定要註意：
  
  - **把git日誌扔到更新日誌裏。**看似有用，然並卵。
  - **不寫'deprecations'就刪功能。**不帶這樣坑隊友的。
  - **采用各種不靠譜日期格式** 2012年12月12日，也就中國人能看懂了。
  
  如果妳還有要吐槽的，歡迎留[issue][issues]或者直接PR
  

  ### 世界上不是有標準的更新日誌格式嗎？
  貌似GNU或者GNU NEWS還是提過些規範的，事實是它們太過簡陋了。
  開發有那麽多中情況，采用那樣的規範，確實是不太合適的。
  
  這個項目提供的[規範][CHANGELOG]是作者本人希望能夠成為世界規範的。
  作者不認為當前的標準足夠好，而且作為壹個社區，我們是有能力提供更棒的規範。
  如果妳對這個規範有不滿的地方，不要忘記還可以[吐槽][issues]呢。
  
  ### 更新日誌文件名應該叫什麽？

  我們的案例中給的名字就是最好的規範：`CHANGELOG.md`，註意大小寫。
  
  像`HISTORY.txt`, `HISTORY.md`, `History.md`, `NEWS.txt`,
  `NEWS.md`, `News.txt`, `RELEASES.txt`, `RELEASE.md`, `releases.md`這麽
  多文件名就太不統壹了。
  
  只會讓大家更難找到。
  
  ### 為何不直接記錄`git log`?

  因為git日誌壹定是亂糟糟的。哪怕壹個最理想的由完美的程序員開發的提交的，哪怕壹個
  從不忘記每次提交全部文件，不寫錯別字，不忘記重構每壹個部分——也無法保證git日誌完美無瑕。
  況且git日誌的核心在於記錄代碼的演化，而更新日誌則是記錄最重要的變更。
  
  就像註釋之於代碼，更新日誌之於git日誌。前者解釋*為什麽*，而後者說明*發生了什麽*。


  ### 更新日誌能機器識別嗎？
  非常困難，因為有各種不同的文件格式和其他規範。
  
  [Vandamme][vandamme]是壹個Ruby程序（由[Gemnasium][gemnasium]團隊制作），可以解析
  好多種（但絕對不是全部）開源庫的更新日誌。
  
  ### 到底是CHANGELOG還是更新日誌
  
  CHANGELOG是文件名，更新日誌是常用說法。CHANGELOG采用大寫是有歷史根源的。就像很多類似的文件
  [`README`][README]， [`LICENSE`][LICENSE]，還有[`CONTRIBUTING`][CONTRIBUTING]。
  
  采用大寫可以更加顯著，畢竟這是項目很重要的元信息。就像[開源徽章][shields]。
  
  ### 那些後來撤下的版本怎麽辦？
  因為各種安全/重大bug原因被撤下的版本被標記'YANKED'。這些版本壹般不出現在更新日誌裏，但作者建議他們出現。
  顯示方式應該是：
  
  `## 0.0.5 - 2014-12-13 [YANKED]`
  
  `[YANKED]`采用大寫更加顯著，因為這個信息很重要。而采用方括號則容易被程序解析。
  
  ### 是否可以重寫更新日誌
  當然。哪怕已經上線了，也可以重新更新更新日誌。有許多開源項目更新日誌不夠新，所以作者就會幫忙更新。
  
  另外，很有可能妳忘記記錄壹個重大功能更新。所以這時候應該去重寫更新日誌。
  
  ### 如何貢獻？
  本文檔並不是**真理**。這只是原作者的個人建議，並且包括許多收集的例子。
  哪怕[本開源庫][gh]提供壹個[更新日誌案例][CHANGELOG]，我刻意沒有提供壹個
  過於苛刻的規則列表（不像[語義化版本格式][semver]）。
  
  這是因為我希望通過社區達到統壹觀點，我認為中間討論的過程與結果壹樣重要。
  
  所以[歡迎貢獻][gh]。
  

  [CHANGELOG]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md
  [CONTRIBUTING]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CONTRIBUTING.md
  [LICENSE]: https://github.com/olivierlacan/keep-a-changelog/blob/master/LICENSE
  [README]: https://github.com/olivierlacan/keep-a-changelog/blob/master/README.md
  [gemnasium]: https://gemnasium.com/
  [gh]: https://github.com/olivierlacan/keep-a-changelog
  [issues]: https://github.com/olivierlacan/keep-a-changelog/issues
  [semver]: http://semver.org/lang/zh-CN/
  [shields]: http://shields.io/
  [thechangelog]: http://5by5.tv/changelog/127
  [vandamme]: https://github.com/tech-angels/vandamme